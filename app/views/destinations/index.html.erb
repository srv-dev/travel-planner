
<div class="dest-list">
  <h3> Featured Destinations </h3>
</div>

<style>
  #map-example-container {height: 300px};
</style>

<div class="container dest-list">
  <div class="row">
    <div class="col-8">
      <div class="row">
        <% @destinations.each do |destination| %>
          <div class="col-6">
            <div class="card-deck">
              <div class="card">
                <%= link_to image_tag(destination.image, class: 'card-img-top'), edit_destination_path(destination.id) %>
                <div class="card-body">
                  <h5 class="card-title">
                    <%= tag.div class: 'dest-names' do %>
                      <%= link_to destination.name, edit_destination_path(destination.id) %>
                    <% end %>
                  </h5>
                </div> <!-- card-body -->
              </div>
            </div> <!-- card-deck -->
          </div>
        <% end %>
      </div>
    </div>

    <div class="col-4">
      <div id="map-example-container"></div>

      <%= form_tag destinations_path, method: :post do %>
         <%= text_field_tag :dest,nil,type:"search", id:"input-map", class:"form-control", placeholder:"Where are we going?" %>
         <%= submit_tag "Let's go!"%>
      <% end %>
    </div>
  </div> <!-- row -->
</div>
<script src="https://cdn.jsdelivr.net/npm/places.js@1.17.1"></script>
<script>

(function() {
  var placesAutocomplete = places({
    appId: 'plABKWHQU4ZJ',
    apiKey: '10e852cb04ccf2fe1aa32889f981d6c5',
    container: document.querySelector('#input-map')
  });

  var map = L.map('map-example-container', {
    scrollWheelZoom: false,
    zoomControl: false
  });

  var osmLayer = new L.TileLayer(
    'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      minZoom: 1,
      maxZoom: 13,
      attribution: 'Map data Â© <a href="https://openstreetmap.org">OpenStreetMap</a> contributors'
    }
  );

  var markers = [];

  map.setView(new L.LatLng(0, 0), 1);
  map.addLayer(osmLayer);

  placesAutocomplete.on('suggestions', handleOnSuggestions);
  placesAutocomplete.on('cursorchanged', handleOnCursorchanged);
  placesAutocomplete.on('change', handleOnChange);
  placesAutocomplete.on('clear', handleOnClear);

  function handleOnSuggestions(e) {
    markers.forEach(removeMarker);
    markers = [];

    if (e.suggestions.length === 0) {
      map.setView(new L.LatLng(0, 0), 1);
      return;
    }

    e.suggestions.forEach(addMarker);
    findBestZoom();
  }

  function handleOnChange(e) {
    markers
      .forEach(function(marker, markerIndex) {
        if (markerIndex === e.suggestionIndex) {
          markers = [marker];
          marker.setOpacity(1);
          findBestZoom();
        } else {
          removeMarker(marker);
        }
      });
  }

  function handleOnClear() {
    map.setView(new L.LatLng(0, 0), 1);
    markers.forEach(removeMarker);
  }

  function handleOnCursorchanged(e) {
    markers
      .forEach(function(marker, markerIndex) {
        if (markerIndex === e.suggestionIndex) {
          marker.setOpacity(1);
          marker.setZIndexOffset(1000);
        } else {
          marker.setZIndexOffset(0);
          marker.setOpacity(0.5);
        }
      });
  }

  function addMarker(suggestion) {
    var marker = L.marker(suggestion.latlng, {opacity: .4});
    marker.addTo(map);
    markers.push(marker);
  }

  function removeMarker(marker) {
    map.removeLayer(marker);
  }

  function findBestZoom() {
    var featureGroup = L.featureGroup(markers);
    map.fitBounds(featureGroup.getBounds().pad(0.5), {animate: false});
  }
})();
</script>
